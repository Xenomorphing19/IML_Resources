# -*- coding: utf-8 -*-
"""IML_Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nOAvQd2ZST9aDdW-Dwaf_Ud1iCu9VXgc
"""

import numpy as np, matplotlib.pyplot as plt

"""**Collecting Data**
The Data regarding number of deaths is collected from [Link](https://ourworldindata.org/coronavirus/country/india)

Let the Best fitting Linear Equation be W0 + W1(x) = y
"""

X = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]
Y = [3318, 3405, 3502, 3571, 3619, 3679, 3773, 3829, 3879, 3940, 4001, 4021, 4033, 3991, 3991, 4039, 4103, 4150, 4115, 4144, 4188, 4140, 4190, 4073, 4020, 4016, 3937, 3855, 3815, 3625, 3523]
m = 22
A=0
B=0
C=0
D=0

"""Calculation for the variables W0 & W1 using the data for first 22 days (i.e 1st May,2021 to 22nd May,2021)"""

for i in range(0,m):
  A = A + X[i]
  B = B + Y[i]
  C = C + (X[i]*X[i])
  D = D + (X[i]*Y[i])

W0 = (B*C - A*D)/(m*C - A*A)
W1 = (A*B - m*D)/(A*A - m*C)

"""Calculating the squared error for the rest 9 days (i.e 23rd May,2021 to 31st May,2021)"""

linear_error = 0
for i in range(m,31):
  linear_error = linear_error + ((W0 + W1*X[i]) - Y[i])**2
print("error for last 9 days: ",linear_error)

"""Prediction for the given dates (20th May,2021 & 10th June,2021)
20th May,2021 corresponds to number -10 and 10th June,2021 corresponds to the number 41 according to our solution.
"""

print("Death Prediction on 20th May,2021: ",(W0 + W1*(-10)))
print("Death Prediction on 10th June,2021: ",(W0 + W1*(41)))

"""Plotting the Linear Fitting equations along with the known Data"""

plt.plot(X, Y)
plt.xlabel('Days')
plt.ylabel('No. of Deaths')
XX = np.linspace(0,32)
YY = W0 + W1*XX
plt.plot(XX,YY)
plt.show()

"""Let the Best fitting Quadratic Equation be WW0 + WW1(x) + WW2(x^2) = y"""

E=0
F=0
G=0

"""Calculation for the variables WW0 & WW1 & WW2 using the data for first 22 days (i.e 1st May,2021 to 22nd May,2021)"""

for i in range(0,m):
  E = E + (X[i]**3)
  F = F + (X[i]**4)
  G = G + (Y[i]*X[i]*X[i])

lhs = [[m,A,C],[A,C,E],[C,E,F]]
rhs = [B,D,G]
W = np.linalg.solve(lhs,rhs)
WW0 = W[0]
WW1 = W[1]
WW2 = W[2]

"""Calculating the squared error for the rest 9 days (i.e 23rd May,2021 to 31st May,2021)"""

quadratic_error = 0
for i in range(m,31):
  quadratic_error = quadratic_error + ((WW0 + WW1*X[i] + WW2*X[i]*X[i]) - Y[i])**2
print("error for last 9 days: ",quadratic_error)

"""Prediction for the given dates (20th May,2021 & 10th June,2021)
20th May,2021 corresponds to number -10 and 10th June,2021 corresponds to the number 41 according to our solution.
"""

print("Death Prediction on 20th May,2021: ",(WW0 + WW1*(-10) + WW2*(-10)*(-10)))
print("Death Prediction on 10th June,2021: ",(WW0 + WW1*(41) + WW2*(41)*(41)))

"""Plotting the Quadratic Fitting equations along with the known Data"""

plt.plot(X, Y)
plt.xlabel('Days')
plt.ylabel('No. of Deaths')
XX1 = np.linspace(0,32)
YY1 = WW0 + WW1*XX1 + WW2*XX1*XX1
plt.plot(XX1,YY1)
plt.show()

"""Since quadratic_error < Linear_error, so The quadratic best fit gives the more accurate results"""